var env = require('project/env')
var envTypes = require('project/envTypes')

var Fiber
try {
    Fiber = require('fibers')
} catch (e) {}

function CallbackAdapter (flowControl, callback) {
    this.resolved = false
    this.flowControl = flowControl
    this.callback = callback
    this.done = this.done.bind(this)
}

CallbackAdapter.prototype.setCallback = function setCallback (callback) {
    this.callback = callback
}

CallbackAdapter.prototype.done = function done (err, data) {
    if (this.callback) {
        if (this.resolved) {
            throw new Error('CallbackAdapter: callback already have been called')
        }
        this.resolved = true
        return this.callback(err, data)
    } else {
        this.error = err
        this.data = data
    }
}

CallbackAdapter.prototype.resolve = function resolve () {
    var inFiber
    var returnPromise

    if (this.resolved) {
        return void 0
    }

    this.resolved = true

    inFiber = Fiber && Fiber.current

    switch (true) {
        case env === envTypes.NODE && inFiber:
        case env === envTypes.BROWSER && this.flowControl === 'sync':
        case env === envTypes.GOOGLE_SCRIPT:
            returnPromise = false
            break

        default:
            returnPromise = true
    }

    if (returnPromise) {
        if (typeof Promise === 'undefined') {
            if (this.error) { throw this.error }
            throw new Error('You must use callback without Promise support')
        }
        return this.error ? Promise.reject(this.error) : Promise.resolve(this.data)
    } else {
        if (this.error) {
            throw this.error
        } else {
            return this.data
        }
    }
}

module.exports = CallbackAdapter
