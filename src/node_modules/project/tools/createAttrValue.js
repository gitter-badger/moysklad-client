/**
 * createAttrValue
 * Date: 17.06.14
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var _ = require('lodash');

/**
 * Создает объект AttributeValue
 */
var createAttrValue = function () {

    var attributes = {},
        isSingleAttribute = false;

    // createAttributeValue(type, metadataUuid, value)
    if (arguments.length === 3) {
        attributes[arguments[1]] = [
            arguments[0], arguments[2]
        ];
        isSingleAttribute = true;
    }

    // createAttributeValue([
    //     [ type, metadataUuid, value ],
    //     ...
    // ])
    else if (arguments.length === 1 && arguments[0] instanceof Array) {
        _.forEach(arguments[0], function (attrInfo) {
            attributes[attrInfo[1]] = [ attrInfo[0], attrInfo[2] ]
        });
    }

    else {
        throw new Error('createAttributeValue: incorrect arguments');
    }

    var attributeValues = _.map(attributes, function (attributeValueData, metadataUuid) {

        var type    = attributeValueData[0],
            value   = attributeValueData[1];

        var attributeValue = {
            TYPE_NAME: 'moysklad.attributeValue',
            metadataUuid: metadataUuid
        };

        //TODO Ensure
        switch (type) {
            case 'Text':
            case 'Текст':
            case 'Link':
            case 'Ссылка':
                attributeValue.valueText = value;
                break;

            case 'String':
            case 'Строка':
                attributeValue.valueString = value;
                break;

            case 'Double':
            case 'Число дробное':
                attributeValue.doubleValue = value;
                break;

            case 'Long':
            case 'Число целое':
                attributeValue.longValue = value;
                break;

            case 'Boolean':
            case 'Флажок':
                attributeValue.booleanValue = value;
                break;

            case 'Date':
            case 'Дата':
                if (value instanceof Date && value !== Infinity)
                    attributeValue.timeValue = value;
                else
                    return null;
                break;

            case 'CustomEntity':
            case 'Справочник':
                attributeValue.entityValueUuid = value;
                break;

            default:
                throw new Error('createAttributeValue: attribute type [' + type + '] not correct');
        }

        return attributeValue;
    });

    attributeValues = _.compact(attributeValues);

    return isSingleAttribute ? attributeValues[0] : attributeValues;
};

module.exports = createAttrValue;