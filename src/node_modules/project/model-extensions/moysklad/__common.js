/**
 * _common
 * Date: 27.05.15
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var _       = require('lodash'),
    tools   = require('project/tools');


module.exports = function (typeName, map, client) {

    var getAttrMetadata = function (typeName, attrName) {
        if (!client.metadata) throw new Error('Metadata not loaded. Use client.loadMetadata()');

        var uriTypeName = tools.getUriTypeName(typeName);

        var embeddedEntityMetadata = client.metadata.embeddedEntityMetadataByName[uriTypeName];
        if (embeddedEntityMetadata) {
            var attributeMetadata = _.find(embeddedEntityMetadata.attributeMetadata, { name: attrName });
            if (!attributeMetadata) throw new Error('Can not find attribute metadata [' + attrName + ']');
            return attributeMetadata;

        } else throw new Error('Can not find medatata for [' + uriTypeName + '] type');
    };

    var extensions = {
        state: {},
        methods: {},
        enclose: {}
    };

    // Метод save должен быть привязан только к агрегатам
    if (map.elementInfos[typeName]) {
        extensions.methods.save = function () {
            return client.save.apply(client, [this].concat(_.toArray(arguments)));
        }
    }

    // Подключаем методы работы с атрибутами для сущностей с коллекцией "attribute"
    var typeInfo = map.typeInfos[typeName];
    if (_.find(typeInfo.propertyInfos, function (propInfo) {
            return propInfo.name === 'attribute'
                && propInfo.typeInfo.slice(-14) === 'AttributeValue';
        })) {

        extensions.methods.getAttr = function (attr, create) {
            var metadataUuid = tools.isUuid(attr)
                ? attr
                : getAttrMetadata(this.getType(), attr).uuid;

            return tools.getAttr(this, metadataUuid, create);
        };

        extensions.methods.hasAttr = function (attr) {
            var metadataUuid = tools.isUuid(attr)
                ? attr
                : getAttrMetadata(this.getType(), attr).uuid;

            return tools.hasAttr(metadataUuid);
        };

        extensions.methods.getAttrValue = function (attr) {
            var metadataUuid = tools.isUuid(attr)
                ? attr
                : getAttrMetadata(this.getType(), attr).uuid;

            var attributeValue = this.getAttr(metadataUuid);
            if (attributeValue) return attributeValue.getValue();
            return null;
        };

    }

    return extensions;
};