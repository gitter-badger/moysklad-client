/**
 * accountEntity
 * Date: 24.05.15
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var tools = require('project/tools');

var getPositions = function (entity) {
    if (entity.instanceOf('operationWithPositions')) {
        return _.find(entity, function (value, key) {
            return key.instanceOf ? key.instanceOf('motion') : false;
        })
    }
    return null;
};

module.exports = function (typeName, map, client) {

    var normalizeTypeName = function (typeName) {
        return typeName.indexOf('.') !== -1
            ? typeName
            : map.name + '.' + typeName;
    };

    var instanceOf = function (entity, baseTypeName) {
        //TODO cache
        if (!entity) throw new Error('entity not defined');
        if (!baseTypeName) throw new Error('baseEntityTypeName not defined');

        var typeName = normalizeTypeName(entity.TYPE_NAME);
        baseTypeName = normalizeTypeName(baseTypeName);

        if (typeName === baseTypeName) {
            return true;

        } else {
            var type = map.typeInfos[typeName];
            if (type) return instanceOf({ TYPE_NAME: type.baseTypeInfo }, baseTypeName)
        }

        return false;
    };

    return {
        methods: {
            getType: function () {
                return this.TYPE_NAME;
            },
            instanceOf: function (typeName) {
                return instanceOf(this, typeName);
            },
            getPositions: function () {
                return tools.getPositions(this);
            },
            getProperty: function () {
                return tools.getProperty.apply(tools, [this].concat(_.toArray(arguments)))
            },
            clone: function () {
                return tools.clone(this);
            }
        }
    }
};