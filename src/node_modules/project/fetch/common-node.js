/**
 * Default Http request provider factory
 * Date: 11.01.14
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var _               = require('lodash')
  , colors          = require('colors')
  , HttpClient      = require('common-node/lib/httpclient').HttpClient
  , Queue           = require('./queue')
  , log             = require('project/logger')
  , callbackAdapter = require('./../../../tools/callbackAdapter');

var queue = new Queue({
    async: false
});

var fetch = {

    fetch: function (options, callback) {

        ['requestPeriod', 'requestsPerPeriod', 'parallelTaskCount']
            .forEach(function (opt) {
                if (options[opt] && queue[opt] !== options[opt]) {
                    queue[opt] = options[opt]
                }
            });

        var _options = {
            contentType: 'application/x-www-form-urlencoded',
            method: 'GET',
            async: false
        };
        _.extend(_options, options);

        var httpClient = new HttpClient({
            method: _options.method,
            url: _options.url
        });

        var response, result, err;

        httpClient.setHeader('Content-Type', _options.contentType);

        _.forOwn(_options.headers, function (value, key) {
            httpClient.setHeader(key, value);
        });

        // Show request info
        log.info([
            colors.blue('http'),
            colors.magenta(_options.method),
            _options.url
        ].join(' '));

        var startTime = new Date();
        var httpResponse;
        try {
            if (_options.payload) httpClient.write(_options.payload);
            queue.addTask(function (cb) {
                httpResponse = httpClient.connect().read();
                cb();
            });
        }
        catch (e) {
            err = {
                code: 'HttpClient Error',
                message: e
            };
        }

        if (!err) {
            response = {
                headers: httpResponse.headers,
                contentText: httpResponse.body.read().decodeToString(),
                responseCode: httpResponse.status
            };

            // Show response info
            log.info([
                colors.blue('http'),
                colors.magenta(response.responseCode),
                _options.url,
                colors.grey((new Date() - startTime) + 'ms ' + response.contentText.length + 'b')
            ].join(' '));
        }

        result = {
            response: response,
            request: _options
        };

        return callbackAdapter(err, result, callback);
    }
};

module.exports = fetch;
