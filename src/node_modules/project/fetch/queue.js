var sleep = require('project/sleep');
var util = require('util');

// TODO: В асинхронном режиме, временем запроса может быть время получения первого пакета
// TODO: Узнать более точную информацию в ТП

var Queue = function (options) {
    options = options || {};

    this.requestPeriod = options.requestPeriod || 1000;
    this.requestsPerPeriod = options.requestsPerPeriod || 5;
    this.parallelTaskCount = options.parallelTaskCount || 2;
    this.async = 'async' in options ? !!options.async : true;

    this._lastTaskId = 0;
    this._timeline = [];
    this._tasksInProgress = 0;
    this._queue = []
};

Queue.prototype.addTask = function (task, cb) {
    if (!cb && this.async) {
        throw new Error('Queue.addTask: callback must be defined in async mode');
    }
    this._queue.push({ id: ++this._lastTaskId, action: task, cb: cb });
    return this._processQueueTask()
};

Queue.prototype._processQueueTask = function () {
    var that = this;
    if (this._tasksInProgress < this.parallelTaskCount && this._queue.length > 0) {
        var curTime = new Date();

        while (this._timeline.length) {
            // -r1-r2-[-r3--r4-r5----------*]
            if (curTime - this._timeline[0] > this.requestPeriod) {
                this._timeline.shift()
            }
            // -------[-r3--r4-r5----------*]
            else {
                break
            }
        }

        // [r1-r2---r3--r4-r5--*--]
        if (this._timeline.length >= (this.requestsPerPeriod - this._tasksInProgress)) {
            var waitTime = this.requestPeriod - (curTime - this._timeline[0]);
            //console.log(util.format('tasksInProgress: %s | sleep for: %s',
            //    this._tasksInProgress, waitTime)); // DEBUG
            return sleep(waitTime, this.async, this._processQueueTask.bind(this));
        }
        // else
        // [r1-r2---r3---------*--]

        var task = this._queue.shift();
        this._tasksInProgress++;

        var result;
        //console.log('start task#', task.id); // DEBUG
        task.action(function (err, data) {
            //console.log(util.format('finish task#%s | queue.length: %s',
            //    task.id, that._queue.length)); // DEBUG
            that._tasksInProgress--;
            that._timeline.push(new Date());
            if (task.cb) {
                if (that.async) { that._processQueueTask(); }
                task.cb.apply(null, arguments);
            } else {
                if (err) {
                    throw err;
                } else {
                    result = data;
                }
            }
        });
        return result;
    }
};

module.exports = Queue;


