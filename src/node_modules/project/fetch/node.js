/**
 * Default Http request provider factory
 * Date: 11.01.14
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var _                 = require('lodash'),
    colors            = require('colors'),
    request           = require('request'),
    log               = require('project/logger'),
    Queue             = require('./queue'),
    callbackAdapter   = require('./../../../tools/callbackAdapter');

var queue = new Queue();

var fetch = {

    fetch: function (options, callback) {

        ['requestPeriod', 'requestsPerPeriod', 'parallelTaskCount']
            .forEach(function (opt) {
                if (options[opt] && queue[opt] !== options[opt]) {
                    queue[opt] = options[opt]
                }
            });

        var _options = {
            url: options.url,
            method: options.method || 'GET',
            headers: {
                'Content-Type': options.contentType || 'application/x-www-form-urlencoded'
            }
        };

        _.extend(_options.headers, options.headers);

        if (options.payload) _options.body = options.payload;

        var requestTask = function (cb) {
            // Show request info
            log.info([
                colors.blue('http'),
                colors.magenta(_options.method),
                _options.url
            ].join(' '));

            var startTime = new Date();

            request(_options, function (error, resp, body) {
                var response;

                if (!error) {
                    response = {
                        headers:        resp.headers,
                        responseCode:   resp.statusCode,
                        contentText:    body
                    };

                    // Show response info
                    log.info([
                        colors.blue('http'),
                        colors.magenta(response.responseCode),
                        _options.url,
                        colors.grey((new Date() - startTime) + 'ms ' + response.contentText.length + 'b')
                    ].join(' '));
                }

                cb(error, {
                    response: response,
                    request: _options
                })
            });
        };

        queue.addTask(requestTask, callback)
    }
};

module.exports = fetch;
