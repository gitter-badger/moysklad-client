/**
 * Default Http request provider factory
 * Date: 11.01.14
 * Vitaliy V. Makeev (w.makeev@gmail.com)
 */

var _ = require('lodash'),
    callbackAdapter = require('./../../../tools/callbackAdapter'),
    Queue = require('./queue'),
    log = require('project/logger');

var queue = new Queue({
    async: false
});

var fetch = {

    fetch: function (options, callback) {

        ['requestPeriod', 'requestsPerPeriod', 'parallelTaskCount']
            .forEach(function (opt) {
                if (options[opt] && queue[opt] !== options[opt]) {
                    queue[opt] = options[opt]
                }
            });

        var _options = {
            contentType: 'application/x-www-form-urlencoded',
            method: 'GET'
        };

        _.extend(_options, options);

        var requestTask = function (cb) {
            var xhr = new XMLHttpRequest(), response;

            xhr.open(_options.method, _options.url, !!_options.async);
            xhr.setRequestHeader('Content-Type', _options.contentType);

            _.forOwn(_options.headers, function (value, key) {
                xhr.setRequestHeader(key, value);
            });

            /*
            // Show request info
            log.info([
                'http',
                _options.method,
                _options.url
            ].join(' '));
            */

            var getResult = function () {
                response = {
                    headers: null,
                    contentText: xhr.responseText,
                    contentXml: xhr.responseXML,
                    responseCode: (typeof xhr.status === 'number') ? xhr.status : parseInt(xhr.status.split('\n')[0]),
                    responseCodeText: xhr.statusText
                };

                var result = {
                    response: response,
                    request: _options
                };

                /*
                log.info([
                    'http',
                    response.responseCode,
                    _options.url,
                    (new Date() - startTime) + 'ms ' + response.contentText.length + 'b'
                ].join(' '));
                */

                return result;
            };

            var startTime = new Date();

            if (_options.async) {
                xhr.onreadystatechange = function () {
                    if (xhr.readyState != 4) return;
                    cb(null, getResult());
                };
                xhr.send(_options.payload);

            } else {
                xhr.send(_options.payload);
                cb(null, getResult());
            }
        };

        queue.async = _options.async;

        return queue.addTask(requestTask, callback)
    }
};

module.exports = fetch;
